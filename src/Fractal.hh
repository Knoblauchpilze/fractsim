#ifndef    FRACTAL_HH
# define   FRACTAL_HH

# include <mutex>
# include <vector>
# include <memory>
# include <core_utils/CoreObject.hh>
# include <maths_utils/Vector2.hh>
# include <maths_utils/Size.hh>
# include <maths_utils/Box.hh>
# include <sdl_engine/Brush.hh>
# include <sdl_engine/Gradient.hh>
# include "RenderingTile.hh"

namespace fractsim {

  class Fractal: public utils::CoreObject {
    public:

      /**
       * @brief - Create a new fractal object with the specified canvas size and
       *          rendering area. The rendering area is supposed to be drawn on
       *          a canvas having dimensions of `canvas`.
       *          The process uses the internal tiles to retrieve a suited color
       *          for each pixel of the canvas through the `createBrush` method.
       * @param canvas - the canvas size associated to the fractal. Used as an
       *                 indication of the output image desired.
       * @param area - the rendering area represented by this fractal. This area
       *               is in real world coordinate.
       */
      Fractal(const utils::Sizef& canvas,
              const utils::Boxf& area);

      /**
       * @brief - Destruction of the object.
       */
      ~Fractal() = default;

      /**
       * @brief - Assign a new canvas size, which means that the brush generated by the
       *          `createBrush` method will produce data matching this size.
       *          The larger this area the more memory and time it will take/use for the
       *          brush's creation.
       * @param canvas - the new canvas' size assigned to this fractal.
       */
      void
      resize(const utils::Sizef& canvas);

      /**
       * @brief - Assigns a new rendering area for this fractal. Offsets the rendering
       *          area represented by the canvases produced by this object.
       * @param area - the rendering area associated to this fractal.
       */
      void
      realWorldResize(const utils::Boxf& area);

      /**
       * @brief - Used to register a new data tile to be used when producing images for
       *          the output canvas. This tile is not used right away, a new call to the
       *          `createBrush` method should be issued for that.
       * @param tile - the data tile to register.
       */
      void
      registerDataTile(RenderingTileShPtr tile);

      /**
       * @brief - Create a new brush that can be used to create a texture representing this
       *          fractal. The gradient in input is used to fetch colors based on the data
       *          available for the convergence of the fractal.
       * @param gradient - the palette to use to colorize the fractal.
       * @return - a pointer to a brush representing the fractal.
       */
      sdl::core::engine::BrushShPtr
      createBrush(sdl::core::engine::GradientShPtr gradient);

    private:

      /**
       * @brief - Used to retrieve a value that can be used as a threshold when comparing
       *          whether a coordinate lies inside the rendering area defined for this
       *          fractal.
       * @return - a value that can be used as a threshold.
       */
      static
      float
      getToleranceForCells() noexcept;

      /**
       * @brief - Used to try to assign the `confidence` to the value described by the `cell` of
       *          the internal cache. Potential failures include not allocated cache or out of
       *          bound cells.
       * @param cell - the cell to set.
       * @param value - the value to assign to the cell.
       */
      void
      setOrThrow(const utils::Vector2i& cell,
                 float value);

    private:

      /**
       * @brief - Used to protect this object from concurrent accesses.
       */
      std::mutex m_propsLocker;

      /**
       * @brief - The size of the canvas associated to this fractal.
       */
      utils::Sizef m_canvas;

      /**
       * @brief - The area assigned to this fractal. This allows to determine which part of
       *          the internal cache corresponds to which position in the real world.
       */
      utils::Boxf m_area;

      /**
       * @brief - Contains all the tiles registered for this fractal so far. These tiles are
       *          used when performing the creation of the brush to create the visual display
       *          for this fractal.
       */
      std::vector<RenderingTileShPtr> m_tiles;
  };

  using FractalShPtr = std::shared_ptr<Fractal>;
}

# include "Fractal.hxx"

#endif    /* FRACTAL_HH */
